2011-2-22 James Wendt <jwendt@cs.ucla.edu>
	* src/sort.c (mergelines_lists, sequential_sort_lists): Added spaces around
	parens to meet GNU's coding standards.

2011-2-22 Drew Kutilek <dkutilek@ucla.edu>
	* src/sort.c (line_discriminator, general_numeric_discriminator,
	human_numeric_discriminator): Added and removed spaces around parens
	to meet GNU's coding standards.

2011-2-22 James Wendt <jwendt@cs.ucla.edu>
	* src/sort.c (struct line): Added pointer to next sorted line.
	* src/sort.c (struct sorted_ends): New struct to house tuple (start,
	end) of sorted linked list of lines (not yet implemented).
	* src/sort.c (mergelines_lists): New function. Merges two linked lists of
	lines in place.
	* src/sort.c (sequental_sort_lists): New function. Sorts and merges linked
	lists of lines.

2011-2-16 Drew Kutilek <dkutilek@ucla.edu>
	* tests/misc/sort-discrim: added another test case for human
	numeric.
	* src/sort.c (debug_key): added change from GNU. we really should
	merge our coreutils with GNU's.  A lots changed.

2011-2-16 Drew Kutilek <dkutilek@ucla.edu>
	* src/sort.c: deleted unneeded comments in sort.c in preparation
	to submit a patch.

2011-2-10 Drew Kutilek <dkutilek@ucla.edu>
	* src/sort.c: Made final pass for GNU coding standards.  Source code
	is ready for tagging and for submission to GNU.

2011-2-10 Drew Kutilek <dkutilek@ucla.edu>
	* src/sort.c (line_discriminator): removed call to strxfrm.  if a
	default compare is needed, discriminator is only used in C or POSIX
	locale, any other locale the disriminator is set to 0.  Same
	performance in other locales, and increase in speed in C or POSIX.

2011-2-9 Drew Kutilek <dkutilek@ucla.edu>
	* src/sort.c (general_numeric_discriminator): removed malloc and
	memcpy.  changed argument to a reference to a discriminator.  slight
	increase of speed.

2011-2-8 Drew Kutilek <dkutilek@ucla.edu>
	* test-case-generators/human_numeric_generator.c (main): added random
	length of numbers generated to vary test cases more.
	* test-case-generators/: added new testing scripts and makefile. view
	test-case-generators/README for details.

2011-2-8 Drew Kutilek <dkutilek@ucla.edu>
	* src/sort.c (numeric_discriminator): changed algorithm and discrim
	representation.  has shown initial speed up.
	* src/sort.c (human_numeric_discriminator): changed algorithm and
	discrim representation.  has shown initial speed up.

2011-2-6 Drew Kutilek <dkutilek@ucla.edu>
	* src/sort.c (numeric_discriminator): fixed algorithm to handle
	thousands separators the same way as the existing code.
	* src/sort.c (human_numeric_discriminator): fixed algorithm to handle
	thousands separators the same way as the existing code.

2011-2-6 Drew Kutilek <dkutilek@ucla.edu>
	* test-case-generators/numeric_generator_no_fraction.c: added new test
	case generator to test the new implementation of the numeric
	discriminator.

2011-2-6 Drew Kutilek <dkutilek@ucla.edu>
	* src/sort.c (numeric_discriminator): changed implementation to simply
	count the number of digits instead of representing the whole number.
	* src/sort.c (human_numeric_discriminator): changed implementation to
	simple count the number of digits instead of representing the whole
	number.
	* test-case-generators/numeric_generator.c (main): added random length
	of numbers generated to vary test cases more.
	* src/sort.c (find_unit_order): removed declaration above
	human_numeric_discriminator.
	* src/sort.c (unit_order): moved array definition to above
	human_numeric_discriminator so it can be referenced in the function.
	* src/sort.c (line_discriminator): changed calls to numeric and human
	numeric discriminator to match new number of arguments.

2011-2-2 Kevin Deng <dengchao@gmail.com>
	* src/sort.c (version_discriminator): Removed the discriminator
	generator. Not going to submit it to GNU due to unclear functionality
	of -V mode, as well as lack of performance gain.

2011-2-2 Drew Kutilek <dkutilek@ucla.edu>
	* src/sort.c (numeric_discriminator): handles overflow correctly now
	* src/sort.c (human_numeric_discriminator): handles overflow
	correctly now.

2011-2-2 Drew Kutilek <dkutilek@ucla.edu>
	* src/sort.c (numeric_discriminator): Fixed bug where if conversion
	to double failed it returned 0, which is our representation of the
	largest negative number.  Now returns 0x8000000000000000, which is
	our representation of 0.  Passes all make check tests.

2011-2-2 Drew Kutilek <dkutilek@ucla.edu>
	* src/sort.c (find_unit_order_discriminator): New function.
	Optimized version of find_unit_order for human_numeric_discrim.
	Changed number of inputs.
	* src/sort.c (human_numeric_discriminator): Fixed bug with
	conversion to floating point using magnitudes.  Changed number of
	inputs.
	* src/sort.c (numeric_discriminator): Fixed bug with conversion to
	floating point.  No longer accepts scientific notation.
	* src/sort.c (find_unit_order): removed declaration above
	human_numeric_discriminator
	* src/sort.c (line_discriminator): Updated calls to
	human_numeric_discriminator and numeric_discriminator to match the
	change in number of arguments.

2011-2-2 James Wendt <jwendt@cs.ucla.edu>
	* src/sort.c (numeric_discriminator): Replaced entire function with much
	simpler implementation. Major performance (runtime) increase.
	* src/sort.c (general_numeric_discriminator): Fixed memory leak.

2011-2-1 Drew Kutilek <dkutilek@ucla.edu>
	* test-case-generators/numeric_generator.c: Added test case generator
	for numeric_discriminator.
	* test-case-generators/human_numeric_generator.c: Added test case
	generator for human_numeric_discriminator.

2011-2-1 Drew Kutilek <dkutilek@ucla.edu>
	* src/sort.c (numeric_discriminator): Slight performance increase.
	* src/sort.c (human_numeric_discriminator): Slight performance
	increase.

2011-1-31 Kevin Deng <dengchao@gmail.com>
	* src/sort.c (version_discriminator): Removed previous implementation.
	Current GNU implementation doesn't do what documentation says it's 
	supposed to do. Added new implementation of discrim that follows what 
	GNU currently actually does.

2011-1-31 James Wendt <jwendt@cs.ucla.edu>
	* src/sort.c (general_numeric_discriminator): Handles non general numeric
	values correctly.

2011-1-31 Drew Kutilek <dkutilek@ucla.edu>
	* src/sort.c (line_discriminator): Fixed error with "/tests/misc/sort-compress".
	Program no longer dumps core due to an unallocated pointer being freed.

2011-1-31 Drew Kutilek <dkutilek@ucla.edu>
	* src/sort.c (human_numeric_discriminator): Fixed error with negative
	numbers.  Program now passes all -h tests in "/tests/misc/sort".  Program
	only fails -g options now.
	
2011-1-31 James Wendt <jwendt@cs.ucla.edu>
	* src/sort.c (general_numeric_discriminator): Now copies bytes from double
	to discrim instead of using pointers.
	* src/sort.c (line_discriminator): Changed byte shuffling to no longer
	apply to general_numeric keys.

2011-1-30 Kevin Deng <dengchao@gmail.com>
	* src/sort.c (version_discriminator): Added discriminant generator.
	Does not work like the other discriminants.

2011-1-30 Drew Kutilek <dkutilek@ucla.edu>
	* src/sort.c (numeric_discriminator): Fixed error with $INTMAX_MAX and 
	$INTMAX_OFLOW.  Program now passes test "/tests/misc/sort-discrim".

2011-1-30 James Wendt <jwendt@cs.cula.edu>
	* src/sort.c (line_discriminator): Changed byte shuffling to apply to
	general_numeric keys.

2011-1-30 James Wendt <jwendt@cs.ucla.edu>

	* src/sort.c (numeric_discriminator): Changed output type from char* to
	uintmax_t.
	* src/sort.c (human_numeric_discriminator): Changed output type from char*
	to uintmax_t.
	* src/sort.c (general_numeric_discriminator): Changed output type from
	char* to uintmax_t.
	* src/sort.c (line_discriminator): Changed byte shuffling to apply only to
	non-numeric keys.

2011-1-29 James Wendt <jwendt@cs.ucla.edu>

	* src/sort.c (general_numeric_discriminator): New function. Returns
	discriminator for general numeric key.
	* src/sort.c (line_discriminator): Calls function to calculate
	discriminator according to key.

2011-1-28 James Wendt <jwendt@cs.ucla.edu>

	* src/sort.c (struct line): Replaced keybeg and keylim pointers with a
	uintmax_t discriminator used for quick comparisons.
	* src/sort.c (fillbuf): Removed precomputation of position of first key
	since keybeg and keylim pointers are no longer in use.
	* src/sort.c (keycompare): Computes begining and limit of key since it is no
	longer precomputed in fillbuf.
	* src/sort.c (compare): Checks if difference between discriminators is
	non-zero, if so, return result, otherwise, function compares as before.
	* src/sort.c (check): Load discrim instead of keybeg and keylim.
	* src/sort.c (mergefps): Save discrim instead of keybeg and keylim.

2011-1-28 James Wendt <jwendt@cs.ucla.edu>

	* ChangeLog: Changed ordering of this ChangeLog to follow the GNU Coding
	Standards already in place. Newest updates are to be  appended to the
	beginning of this document.

2011-1-28 Drew Kutilek <dkutilek@ucla.edu>

	* src/sort.c (human_numeric_discriminator): New function. Returns
	discriminator for human numeric key
	* src/sort.c (numeric_discriminator): New function.  Returns discriminator
	for numeric key
	* src/sort.c (unit_order): moved global variable in order to reference it
	previous to the old point.
	* src/sort.c (find_unit_order): added declaration above
	numeric_discriminator so numeric_discriminator can call it.

2011-1-26  Drew Kutilek  <dkutilek@ucla.edu>

	* src/sort.c: Added uintmax_t discrim member to struct line.
	* src/sort.c (line_discriminator): New function.  Returns discriminator
	given line and key.
	* src/sort.c (get_month): added function declaration above
	line_discriminator so line_discriminator can call it.
	* src/sort.c (keycompare): added call to line_discriminator
	* src/sort.c (struct md5_ctx random_md5_state): added declaration above
	line_discriminator so line_discriminator can call it.
